#include<iostream>
#include<stdlib.h>
#include<fstream>
using namespace std;
#define LIST_INIT_SIZE 100
#define LISTINCREMENT 10
#define TURE 1
#define FALSE 0
#define OK 1
#define ERROR 0
#define INFEASIBLE -1
#define OVERFLOW -2

typedef int Status;
typedef int ElemType;
typedef struct {
	ElemType *elem;
	int length;
	int listsize;
}SqList;

Status InitList(SqList &L) {
	//构造空线性表L
	L.elem = (ElemType*)malloc(LIST_INIT_SIZE * sizeof(ElemType));
	if (!L.elem)
		exit(OVERFLOW);
	L.length = 0;  //初始化线性表长度
	L.listsize = LIST_INIT_SIZE;  //初始储存容量
	return OK;
}

Status DestroyList(SqList &L) {
	//销毁线性表L
	if (L.elem) {
		free(L.elem);
		L.elem = NULL;
		return OK;
	}
	else
		return ERROR;
}

Status ClearList(SqList &L) {
	//清空线性表
	for (int i = 0; i < L.length; i++) {
		L.elem[i] = 0;
	}
	if (L.elem) {
		L.length = 0;
		return OK;
	}
	else
		return ERROR;
}

Status ListEmpty(SqList L) {
	//判断线性表是否为空
	if (L.length == 0)
		return TURE;
	else
		return FALSE;
}

Status ListLength(SqList L) {
	//返回线性表长度
	if (L.elem)
		return L.length;
	else
		return ERROR;
}

Status GetElem(SqList L, int i, ElemType &e) {
	//用e返回L中第i个数据元素的值
	if (i <= 0 || i > ListLength(L))
		return ERROR;
	ElemType *q;
	q = &(L.elem[i - 1]);
	e = *q;
	return OK;
}

Status compare_elem (ElemType e1, ElemType e2) {
	if (e1 == e2)
		return TURE;
	else
		return FALSE;
}

Status LocateElem(SqList L, ElemType e, Status(*compare)(ElemType, ElemType)) {
	//在顺序线性表L中查找第一个值与e满足compare（）的元素的位序
	int i = 1;
	ElemType *p;
	p = L.elem;
	while (i <= L.length && !(*compare)(*p++, e))
		++i;
	if (i <= L.length)
		return i;
	else
		return 0;
}

Status PriorElem(SqList L, ElemType cur_e, ElemType &pre_e) {
	//返回前驱
	int i;
	ElemType *p;
	p = &(L.elem[0]);
	if (*p == cur_e) {
		cout << cur_e << " is the first place has no PreElem!" << endl;
		pre_e = INFEASIBLE;
		return INFEASIBLE;
	}
	i = LocateElem(L, cur_e, compare_elem) - 1;
	if (i == 0)
		return INFEASIBLE;
	else {
		p = &(L.elem[i - 1]);
		pre_e = *p;
		return OK;
	}
}

Status NextElem(SqList L, ElemType cur_e, ElemType &next_e) {
	//返回后继
	int i;
	ElemType *p;
	p = &(L.elem[L.length - 1]);
	if (*p == cur_e) {
		cout << cur_e << " is the last letter has no next_elem!" << endl;
		next_e = INFEASIBLE;
		return INFEASIBLE;
	}
	i = LocateElem(L, cur_e, compare_elem);
	if (i == 0)
		return INFEASIBLE;
	else {
		p = &(L.elem[i]);
		next_e = *p;
		return OK;
	}
}

Status ListInsert(SqList &L, int i, ElemType e) {
	//在L中第i个位置前插入新元素
	ElemType *p;
	ElemType *q;
	if (i<1 || i>L.length)
		return ERROR;
	if (L.length >= L.listsize) {		//当前储存空间已满，增加分配
		ElemType *newbase;
		newbase = (ElemType*)realloc(L.elem, (L.listsize + LISTINCREMENT) * sizeof(ElemType));
		if (!newbase)
			exit(OVERFLOW);
		L.elem = newbase;
		L.listsize += LISTINCREMENT;
	}
	q = &(L.elem[i - 1]);
	for (p = &(L.elem[L.length - 1]); p >= q; p--)
		*(p + 1) = *p;		//第i个元素及之后元素右移
	*q = e;
	++L.length;
	return OK;
}

Status ListDelete(SqList &L, int i, ElemType &e) {
	//在顺序表L中删除第i个元素
	ElemType *p;
	ElemType *q;
	if (i<1 || i>L.length) 
		return ERROR;
	q = &(L.elem[i - 1]);
	e = *q;
	p = &(L.elem[L.length - 1]);
	for (q++; q <= p; q++)
		*(q - 1) = *q;		//第i个元素后的元素左移
	--L.length;
	return OK;
}

Status visit(ElemType e) {
	if (e)
		return TURE;
	else
		return FALSE;
}

Status ListTraverse(SqList L, Status(*visit)(ElemType)) {
	//遍历
	ElemType *p;
	p = L.elem;
	int i = 0;
	int count = 0;
	for (i = 0; i < L.length; i++) {
		visit(*(p + i));
		count++;
	}
	return count;
}

Status InputList(SqList &L) {
	ElemType e;
	ElemType *p;
	fstream datafile;
	datafile.open("LinkList.txt", ios::in);
	if (!datafile) {
		cout << "fail to open!" << endl;
		exit(0);
	}
	while(!datafile.eof()) {
		datafile >> e;
		p = &(L.elem[L.length]);
		*p = e;
		L.length++;
	}
	return OK;
}

Status Display(SqList L) {
	ElemType *p;
	int i;
	if (L.elem == NULL) {
		cout << "there is no list." << endl;
		return ERROR;
	}
	if (L.length == 0) {
		cout << "the list is empty" << endl;
		return OK;
	}
	for (i = 0; i < L.length; i++) {
		p = &(L.elem[i]);
		cout << *p << " ";
	}
	cout << endl;
	return OK;
}

int main() {
	SqList L;
	int i;
	InitList(L);
	InputList(L);
	Display(L);
	cout << "input your choice: ";
	cin >> i;
	switch (i)
	{
	case 1: {
		DestroyList(L);
		Display(L);
		break;
	}
	case 2: {
		ClearList(L);
		Display(L);
		break;
	}
	case 3: {
		cout << ListEmpty(L) << endl;
		break;
	}
	case 4: {
		cout << ListLength(L) << endl;
		break;
	}
	case 5: {
		int n;
		ElemType e;
		cout << "input where you want to get:" << endl;
		cin >> n;
		GetElem(L, n, e);
		cout << e << endl;
		break;
	}
	case 6: {
		ElemType e;
		cout << "input what you want to locate:" << endl;
		cin >> e;
		cout << LocateElem(L, e, compare_elem) << endl;
		break;
	}
	case 7: {
		ElemType cur_e, pre_e;
		cout << "input which prior want to get:" << endl;
		cin >> cur_e;
		PriorElem(L, cur_e, pre_e);
		if (pre_e == -1) {
			break;
		}
		cout << pre_e << endl;
		break;
	}
	case 8: {
		ElemType cur_e, next_e;
		cout << "input which next want to get:" << endl;
		cin >> cur_e;
		NextElem(L, cur_e, next_e);
		if (next_e == -1) {
			break;
		}
		cout << next_e << endl;
		break;
	}
	case 9: {
		ElemType e;
		int i, n;
		cout << "input where want to insert: ";
		cin >> i;
		cout << "input what want to insert: ";
		cin >> e;
		n = ListInsert(L, i, e);
		if (n == ERROR) {
			cout << "input error!" << endl;
			break;
		}
		Display(L);
		break;
	}
	case 10: {
		ElemType e;
		int i, n;
		cout << "input where want to delete: ";
		cin >> i;
		n = ListDelete(L, i, e);
		if (n == ERROR) {
			cout << "delete error!" << endl;
			break;
		}
		cout << e << " already been deleted!" << endl;
		Display(L);
		break;
	}
	case 11: {
		int count;
		count = ListTraverse(L, visit);
		cout << "finish traverse, traverse times: " << count << endl;
		break;
	}
	default:
		break;
	}
	system("pause");
	return 0;
}
